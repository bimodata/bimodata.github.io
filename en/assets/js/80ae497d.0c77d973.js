"use strict";(self.webpackChunk_bimo_docs_website=self.webpackChunk_bimo_docs_website||[]).push([[4557],{1551:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=i(2540),n=i(3023);const a={sidebar_position:10,hide_blog_post_date:!1},r="Loading Data from HASTUS",s={id:"getting-started/load-data/from-hastus",title:"Loading Data from HASTUS",description:"The @bimo/core-utils-control-file-and-csv-data-parser package allows you to:",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/getting-started/load-data/from-hastus.mdx",sourceDirName:"getting-started/load-data",slug:"/getting-started/load-data/from-hastus",permalink:"/en/docs/getting-started/load-data/from-hastus",draft:!1,unlisted:!1,editUrl:"https://github.com/bimodata/bimo/tree/develop/docs-website/i18n/en/docusaurus-plugin-content-docs/current/getting-started/load-data/from-hastus.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,hide_blog_post_date:!1},sidebar:"tutorialSidebar",previous:{title:"Loading Data",permalink:"/en/docs/getting-started/load-data/"},next:{title:"Charger des donn\xe9es JSON",permalink:"/en/docs/getting-started/load-data/from-json"}},l={},c=[{value:"General Information",id:"general-information",level:2},{value:"Types of &quot;loadable&quot; Entities",id:"types-of-loadable-entities",level:3},{value:"Compatibility with Your HASTUS Version",id:"compatibility-with-your-hastus-version",level:3},{value:"Compatibility with Your Specific Attributes",id:"compatibility-with-your-specific-attributes",level:3},{value:"Loading Data Available in a Local Directory",id:"loading-data-available-in-a-local-directory",level:2},{value:"Example",id:"example",level:3},{value:"Options",id:"options",level:3},{value:"Loading Data in a More Complex Architecture",id:"loading-data-in-a-more-complex-architecture",level:2},{value:"Example",id:"example-1",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"loading-data-from-hastus",children:"Loading Data from HASTUS"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.a,{href:"https://github.com/bimodata/bimo/tree/main/public/core/utils/control-file-and-csv-data-parser",children:(0,o.jsx)(t.code,{children:"@bimo/core-utils-control-file-and-csv-data-parser"})})," package allows you to:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Parse a control file (e.g., a HASTUS .oir file) that describes a data format"}),"\n",(0,o.jsx)(t.li,{children:"Parse a data file by interpreting its content based on the information obtained from parsing the control file"}),"\n",(0,o.jsx)(t.li,{children:"Return the data as structured JavaScript objects"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Several packages have been created to wrap this package and simplify its use for various use cases."}),"\n",(0,o.jsx)(t.h2,{id:"general-information",children:"General Information"}),"\n",(0,o.jsx)(t.h3,{id:"types-of-loadable-entities",children:'Types of "loadable" Entities'}),"\n",(0,o.jsx)(t.p,{children:'As you will see in the examples, for all methods, you need to pass the constructor of the type of entity you want to load as an argument. To date, the "loadable" entity types are:'}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"PlacesCollection"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"VehicleSchedulesCollection"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"RouteVersionsCollection"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"RunTimeVersionsCollection"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"BookingsCollection"})}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"compatibility-with-your-hastus-version",children:"Compatibility with Your HASTUS Version"}),"\n",(0,o.jsx)(t.p,{children:"Bimo has so far been used only with HASTUS 2019 and 2020 (and a little bit with 2014). Bimo entities are built based on the HASTUS objects available in these versions. The main HASTUS objects do not evolve significantly, so you should not have any issues using Bimo with other versions of HASTUS (but feel free to contact us if you encounter any problems)."}),"\n",(0,o.jsx)(t.h3,{id:"compatibility-with-your-specific-attributes",children:"Compatibility with Your Specific Attributes"}),"\n",(0,o.jsx)(t.p,{children:"If you have added specific attributes to objects in your version of HASTUS, you probably want to be able to manipulate these attributes in Bimo!"}),"\n",(0,o.jsx)(t.p,{children:"There are two methods to achieve this:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["The complicated method: create your own entities in Bimo by extending the base Bimo entities","\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"This method is not documented at the moment"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.li,{children:'The simple method: use "_rawOirProps"'}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["When you load entities from a data file and a control file extracted from HASTUS, the raw values of all attributes described in the files are stored in the ",(0,o.jsx)(t.code,{children:"_rawOirProps"})," attribute on each loaded entity. These values will also be re-exported to files at the end of your process if the control file used for the export describes an attribute with the same name."]}),"\n",(0,o.jsx)(t.h2,{id:"loading-data-available-in-a-local-directory",children:"Loading Data Available in a Local Directory"}),"\n",(0,o.jsxs)(t.p,{children:["If you are simply writing a script that will run on Node.js on a machine and load the data from its file system, use ",(0,o.jsx)(t.a,{href:"https://github.com/bimodata/bimo/tree/main/public/core/utils/get-entity-from-oir-data-at-path",children:(0,o.jsx)(t.code,{children:"@bimo/core-utils-get-entity-from-oir-data-at-path"})}),". This package reads the files from the folder you pass as a parameter, uses the extensions to distinguish the control file from the data files, and loads the data into Bimo entities."]}),"\n",(0,o.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["Export vehicle schedules from HASTUS using the standard ",(0,o.jsx)(t.code,{children:"oig"})," ",(0,o.jsx)(t.code,{children:"hastus_vehicle_schedule.id"})]}),"\n",(0,o.jsxs)(t.li,{children:["Retrieve the standard ",(0,o.jsx)(t.code,{children:"oir"})," file ",(0,o.jsx)(t.code,{children:"hastus_vehicle_schedule.oir"})]}),"\n",(0,o.jsxs)(t.li,{children:["Place the ",(0,o.jsx)(t.code,{children:"oir"})," file and the data files in the same folder and note the full path of this folder."]}),"\n",(0,o.jsx)(t.li,{children:"You can now load this data with the script below"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",metastring:'title="script.js"',children:"\r\nconst { getEntityFromOirDataAtPath } = require('@bimo/core-utils-get-entity-from-oir-data-at-path');\r\nconst { VehicleSchedulesCollection } = require('@bimo/core-entities');\r\n\r\nconst pathToFolder = `C:\\\\path\\\\to\\\\folder`;\r\n\r\nasync function main() {\r\n  const myVehicleSchedulesCollection = await getEntityFromOirDataAtPath(pathToFolder, VehicleSchedulesCollection);\r\n  \r\n  // You can now do whatever you want with myVehicleSchedulesCollection ...\r\n  console.log(myVehicleSchedulesCollection.longLoggingOutput); \r\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"options",children:"Options"}),"\n",(0,o.jsxs)(t.p,{children:["Feel free to check out the ",(0,o.jsx)(t.a,{href:"https://github.com/bimodata/bimo/tree/main/public/core/utils/get-entity-from-oir-data-at-path",children:"readme"})," of the package and its unit tests for a comprehensive view of the available options."]}),"\n",(0,o.jsx)(t.p,{children:"Note that it is possible to specify whether you want to read multiple data files, in which case the function will return an array containing one entity per file, or a single one, in which case the function will read the first it finds and directly return the concerned entity."}),"\n",(0,o.jsx)(t.p,{children:"It is also possible to customize the extensions (or even the names) of files that are interpreted as control files or data files."}),"\n",(0,o.jsx)(t.h2,{id:"loading-data-in-a-more-complex-architecture",children:"Loading Data in a More Complex Architecture"}),"\n",(0,o.jsxs)(t.p,{children:["In a more complex application where you cannot simply read files from a directory, you can use the package ",(0,o.jsx)(t.a,{href:"https://github.com/bimodata/bimo/tree/main/public/core/services/get-entity-from-oir-data-string-and-control-file",children:(0,o.jsx)(t.code,{children:"@bimo/core-services-get-entity-from-oir-data-string-and-control-file"})}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Its operation is very similar to ",(0,o.jsx)(t.a,{href:"https://github.com/bimodata/bimo/tree/main/public/core/utils/get-entity-from-oir-data-at-path",children:(0,o.jsx)(t.code,{children:"@bimo/core-utils-get-entity-from-oir-data-at-path"})})," but this time, instead of passing the path to a directory, you pass the content of the data file and the control file as strings. It's up to you to figure out how to obtain these strings."]}),"\n",(0,o.jsx)(t.h3,{id:"example-1",children:"Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",metastring:'title="someLambdaFunction.js"',children:"\r\nconst fetch = require(\"isomorphic-unfetch\");\r\n\r\nconst getEntityFromOirDataStringAndControlFile = require('@bimo/core-services-get-entity-from-oir-data-string-and-control-file');\r\nconst { VehicleSchedulesCollection } = require('@bimo/core-entities');\r\n\r\nlet url = \"https://some.api.that.will.return.data/\";\r\n\r\nexports.handler = async function (event) {\r\n  const res = await fetch(url);\r\n  const { oirDataString, oirControlFileString } = await res.json();\r\n\r\n  const myVehicleSchedulesCollection = await getEntityFromOirDataStringAndControlFile(\r\n    {oirDataString, oirControlFileString, EntityConstructor: VehicleSchedulesCollection}\r\n  );\r\n\r\n  // Do whatever you want with the vehicle schedules collection\r\n  // For example, count the total number of trips\r\n  const totalCountOfTrips = myVehicleSchedulesCollection.tripsCollectionOfAllTripsOfAllVscs.count();\r\n\r\n  return totalCountOfTrips;\r\n};\n"})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},3023:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>s});var o=i(3696);const n={},a=o.createContext(n);function r(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);